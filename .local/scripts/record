#!/bin/sh

# Usage:
# `$0`: Ask for recording type via dmenu
# `$0 screencast`: Record both audio and screen
# `$0 video`: Record only screen
# `$0 audio`: Record only audio
# `$0 kill`: Kill existing recording
#
# If there is already a running instance, user will be prompted to end it.

connect_jack() {
  sleep 1s
  jack_connect system:capture_1 ffmpeg:input_1
  jack_connect system:capture_1 ffmpeg:input_2
  jack_connect 'SystemSounds:front-left' ffmpeg:input_1
  jack_connect 'SystemSounds:front-right' ffmpeg:input_2
  jack_connect 'Discord:front-left' ffmpeg:input_1
  jack_connect 'Discord:front-right' ffmpeg:input_2
}

generate_date() {
  date '+%F_%T' | sed -e 's/:/-/g'
}

updateicon() {
	echo "$1" > /tmp/recordingicon
  kill -43 $(pidof dwmblocks)
}

killrecording() {
	recpid="$(cat /tmp/recordingpid)"
	# kill with SIGTERM, allowing finishing touches.
	kill -15 "$recpid"
	rm -f /tmp/recordingpid
	updateicon ""
	pkill -RTMIN+9 "${STATUSBAR:-dwmblocks}"
	# even after SIGTERM, ffmpeg may still run, so SIGKILL it.
	sleep 3
	kill -9 "$recpid"
	exit
}

screen() {
  ! [ -d "$HOME/Videos" ] && mkdir "$HOME/Videos";
  which jack_control > /dev/null
  JACK=$?
	ffmpeg -y \
	-f x11grab \
	-r 60 \
	-s "$(xdpyinfo | grep dimensions | awk '{print $2;}')" \
	-i "$DISPLAY" \
  -f "$([ -z $JACK ] && echo jack || echo pulse)" \
  -i "$([ -z $JACK ] && echo ffmpeg || echo default)" \
 	-c:v h264 -crf 0 -preset ultrafast -c:a aac \
  "$HOME/Videos/screen-$(generate_date).mp4" > /dev/null &
	echo $! > /tmp/recordingpid
  [ -z $JACK ] && connect_jack
	updateicon "🖥️"
}

window() {
  ! [ -d "$HOME/Videos" ] && mkdir "$HOME/Videos";
  if ! [ $(which xdotool 2> /dev/null) ]; then
    echo "Please, install xdotool";
    notify-send -a 'Recording' 'Please, install xdotool';
    exit
  fi
  WINDOW="$(xdotool selectwindow)"
  WINDOW_NAME="$(xdotool getwindowname $WINDOW)"
  eval `xdotool getwindowgeometry --shell $WINDOW`
  which jack_control > /dev/null
  JACK=$?
	ffmpeg -y \
	-f x11grab \
  -video_size "$WIDTH"x"$HEIGHT" \
	-r 60 \
	-i "$DISPLAY.$SCREEN+$X,$Y" \
	-f "$([ -z $JACK ] && echo jack || echo pulse)" \
  -i "$([ -z $JACK ] && echo ffmpeg || echo default)" \
 	-c:v h264 -crf 0 -preset ultrafast -c:a aac \
  "$HOME/Videos/$WINDOW_NAME-$(generate_date).mp4" > /dev/null &
	echo $! > /tmp/recordingpid
  [ -z $JACK ] && connect_jack
	updateicon "🪟"
}

audio() {
  ! [ -d "$HOME/Videos" ] && mkdir "$HOME/Videos";
  which jack_control > /dev/null
  JACK=$?
	ffmpeg \
	-f "$([ -z $JACK ] && echo jack || echo pulse)" \
  -i "$([ -z $JACK ] && echo ffmpeg || echo default)" \
	-c:a flac \
	"$HOME/Videos/audio-$(date '+%FT%T').flac" &
	echo $! > /tmp/recordingpid
  [ -z $JACK ] && connect_jack
	updateicon "🎙️"
}

askrecording() {
  items="🖥️ screen~🪟  window~🎧 audio"
	choice=$(printf "$items" \
    | rofi -dmenu -sep '~' \
    -i -p "Select recording style:")
	case "$choice" in
		"🖥️ screen") screen;;
		"🪟  window") window;;
		"🎧 audio") audio;;
	esac
}

asktoend() {
	response=$(printf "No\\nYes" | rofi -dmenu -i -p "Recording still active. End recording?") &&
	[ "$response" = "Yes" ] &&  killrecording
}


case "$1" in
	"screen") screen;;
	"audio") audio;;
	"window") window;;
	"kill") killrecording;;
	*) ([ -f /tmp/recordingpid ] && asktoend && exit) || askrecording;;
esac
